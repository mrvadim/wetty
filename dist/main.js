#!/usr/bin/env node
"use strict";

var _yargs = _interopRequireDefault(require("yargs"));

var _module = require("module");

var _logger = require("./shared/logger.js");

var _server = require("./server.js");

var _config = require("./shared/config.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _require = (0, _module.createRequire)(_require('url').pathToFileURL(__filename).toString());

var packageJson = _require('../package.json');

var opts = _yargs["default"].scriptName(packageJson.name).version(packageJson.version).options('conf', {
  type: 'string',
  description: 'config file to load config from'
}).option('ssl-key', {
  type: 'string',
  description: 'path to SSL key'
}).option('ssl-cert', {
  type: 'string',
  description: 'path to SSL certificate'
}).option('ssh-host', {
  description: 'ssh server host',
  type: 'string'
}).option('ssh-port', {
  description: 'ssh server port',
  type: 'number'
}).option('ssh-user', {
  description: 'ssh user',
  type: 'string'
}).option('title', {
  description: 'window title',
  type: 'string'
}).option('ssh-auth', {
  description: 'defaults to "password", you can use "publickey,password" instead',
  type: 'string'
}).option('ssh-pass', {
  description: 'ssh password',
  type: 'string'
}).option('ssh-key', {
  demand: false,
  description: 'path to an optional client private key (connection will be password-less and insecure!)',
  type: 'string'
}).option('ssh-config', {
  description: 'Specifies an alternative ssh configuration file. For further details see "-F" option in ssh(1)',
  type: 'string'
}).option('force-ssh', {
  description: 'Connecting through ssh even if running as root',
  type: 'boolean'
}).option('known-hosts', {
  description: 'path to known hosts file',
  type: 'string'
}).option('base', {
  alias: 'b',
  description: 'base path to wetty',
  type: 'string'
}).option('port', {
  alias: 'p',
  description: 'wetty listen port',
  type: 'number'
}).option('host', {
  description: 'wetty listen host',
  type: 'string'
}).option('command', {
  alias: 'c',
  description: 'command to run in shell',
  type: 'string'
}).option('allow-iframe', {
  description: 'Allow WeTTY to be embedded in an iframe, defaults to allowing same origin',
  type: 'boolean'
}).option('allow-remote-hosts', {
  description: 'Allow WeTTY to use the `host` param in a url as ssh destination',
  type: 'boolean'
}).option('help', {
  alias: 'h',
  type: 'boolean',
  description: 'Print help message'
})["boolean"]('allow_discovery').argv;

if (!opts.help) {
  (0, _config.loadConfigFile)(opts.conf).then(function (config) {
    return (0, _config.mergeCliConf)(opts, config);
  }).then(function (conf) {
    return (0, _server.start)(conf.ssh, conf.server, conf.command, conf.forceSSH, conf.ssl);
  })["catch"](function (err) {
    _logger.logger.error(err);

    process.exitCode = 1;
  });
} else {
  _yargs["default"].showHelp();

  process.exitCode = 0;
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
