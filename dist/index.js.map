{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"lodash/isUndefined\"","webpack:///external \"path\"","webpack:///external \"node-pty\"","webpack:///external \"winston\"","webpack:///external \"express\"","webpack:///external \"fs-extra\"","webpack:///external \"compression\"","webpack:///external \"serve-favicon\"","webpack:///external \"helmet\"","webpack:///external \"http\"","webpack:///external \"https\"","webpack:///external \"socket.io\"","webpack:///external \"express-winston\"","webpack:///external \"url\"","webpack:///external \"yargs\"","webpack:///./src/server/socketServer/html.ts","webpack:///./src/server/utils/logger.ts","webpack:///./src/server/socketServer/index.ts","webpack:///./src/server/command/address.ts","webpack:///./src/server/command/login.ts","webpack:///./src/server/command/ssh.ts","webpack:///./src/server/command/parse.ts","webpack:///./src/server/command/index.ts","webpack:///./src/server/wetty/term/xterm.ts","webpack:///./src/server/wetty/term/spawn.ts","webpack:///./src/server/wetty/index.ts","webpack:///./src/server/utils/ssl.ts","webpack:///./src/server/wetty/term/login.ts","webpack:///./src/server/index.ts","webpack:///./src/server/cli/index.ts","webpack:///./src/server/cli/parseArgs.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","base","title","req","res","resourcePath","test","url","replace","send","combine","timestamp","label","simple","json","colorize","format","logger","createLogger","all","process","transports","Console","level","handleExceptions","distDir","path","__dirname","trim","str","address","referer","user","host","match","fallback","split","getRemoteAddress","remoteAddress","loginOptions","command","sshOptions","pass","port","auth","knownhosts","cmd","parseCommand","sshRemoteOptsBase","info","concat","splice","indexOf","localhost","getuid","urlArgs","def","assign","query","request","headers","client","conn","forcessh","args","includes","xterm","cols","rows","cwd","env","keys","filter","map","spawnTerm","socket","term","spawn","pid","emit","on","code","removeAllListeners","data","resize","input","write","kill","startWeTTy","ssh","serverConf","bypasshelmet","ssl","async","cert","Promise","readFile","resolve","loadSSL","then","sslBuffer","warn","io","basePath","app","express","use","expressWinston","compression","favicon","next","substr","length","redirect","slice","helmet","html","http","listen","connection","https","pingInterval","pingTimeout","server","sshUser","getCommand","debug","join","remoteUser","buf","reject","exec","login","username","catch","start","WeTTy","init","opts","help","yargs","exitCode","sshuser","sshhost","sshauth","sshport","sshpass","sshkey","sslkey","sslcert","undefined","err","error"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = require(\"lodash/isUndefined\");","module.exports = require(\"path\");","module.exports = require(\"node-pty\");","module.exports = require(\"winston\");","module.exports = require(\"express\");","module.exports = require(\"fs-extra\");","module.exports = require(\"compression\");","module.exports = require(\"serve-favicon\");","module.exports = require(\"helmet\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"socket.io\");","module.exports = require(\"express-winston\");","module.exports = require(\"url\");","module.exports = require(\"yargs\");","import * as express from 'express';\n\nexport default (base: string, title: string) => (\n  req: express.Request,\n  res: express.Response\n): void => {\n  const resourcePath = /^\\/ssh\\//.test(req.url.replace(base, '/'))\n    ? '../'\n    : base;\n\n  res.send(`<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n    <title>${title}</title>\n    <link rel=\"stylesheet\" href=\"${resourcePath}public/index.css\" />\n  </head>\n  <body>\n    <div id=\"overlay\">\n      <div class=\"error\">\n        <div id=\"msg\"></div>\n        <input type=\"button\" onclick=\"location.reload();\" value=\"reconnect\" />\n      </div>\n    </div>\n    <div id=\"options\">\n      <a class=\"toggler\"\n         href=\"#\"\n         alt=\"Toggle options\"><i class=\"fas fa-cogs\"></i></a>\n      <textarea class=\"editor\"></textarea>\n    </div>\n    <div id=\"terminal\"></div>\n    <script src=\"${resourcePath}public/index.js\"></script>\n  </body>\n</html>`);\n};\n","import { createLogger, format, transports } from 'winston';\n\nconst { combine, timestamp, label, simple, json, colorize } = format;\n\nconst logger = createLogger({\n  format: combine(\n    colorize({ all: process.env.NODE_ENV === 'development' }),\n    label({ label: 'Wetty' }),\n    timestamp(),\n    process.env.NODE_ENV === 'development' ? simple() : json()\n  ),\n  transports: [\n    new transports.Console({\n      level: process.env.NODE_ENV === 'development' ? 'debug' : 'info',\n      handleExceptions: true,\n    }),\n  ],\n});\n\nexport default logger;\n","import { isUndefined } from 'lodash';\nimport * as compression from 'compression';\nimport * as express from 'express';\nimport * as favicon from 'serve-favicon';\nimport * as helmet from 'helmet';\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as path from 'path';\nimport * as socket from 'socket.io';\nimport * as expressWinston from 'express-winston';\nimport { SSLBuffer, Server } from '../interfaces';\nimport html from './html';\nimport logger from '../utils/logger';\n\nconst distDir = path.join(__dirname, 'client');\n\nconst trim = (str: string): string => str.replace(/\\/*$/, '');\n\nexport default function createServer(\n  { base, port, host, title, bypasshelmet }: Server,\n  { key, cert }: SSLBuffer\n): SocketIO.Server {\n  const basePath = trim(base);\n\n  logger.info('Starting server', {\n    key,\n    cert,\n    port,\n    base,\n    title,\n  });\n\n  const app = express();\n  app\n    .use(expressWinston.logger(logger))\n    .use(compression())\n    .use(favicon(path.join(distDir, 'favicon.ico')))\n    .use(`${basePath}/public`, express.static(distDir))\n    .use((req, res, next) => {\n      if (req.path.substr(-1) === '/' && req.path.length > 1)\n        res.redirect(\n          301,\n          req.path.slice(0, -1) + req.url.slice(req.path.length)\n        );\n      else next();\n    });\n\n  // Allow helmet to be bypassed.\n  // Unfortunately, order matters with middleware\n  // which is why this is thrown in the middle\n  if (!bypasshelmet) {\n    app.use(helmet());\n  }\n\n  const client = html(base, title);\n  app.get(basePath, client).get(`${basePath}/ssh/:user`, client);\n\n  return socket(\n    !isUndefined(key) && !isUndefined(cert)\n      ? https.createServer({ key, cert }, app).listen(port, host, () => {\n          logger.info('Server started', {\n            port,\n            connection: 'https',\n          });\n        })\n      : http.createServer(app).listen(port, host, () => {\n          logger.info('Server started', {\n            port,\n            connection: 'http',\n          });\n        }),\n    {\n      path: `${basePath}/socket.io`,\n      pingInterval: 3000,\n      pingTimeout: 7000\n    }\n  );\n}\n","export default function address(\n  referer: string,\n  user: string,\n  host: string\n): string {\n  const match = referer.match('.+/ssh/([^/]+)$');\n  const fallback = user ? `${user}@${host}` : host;\n  return match ? `${match[1].split('?')[0]}@${host}` : fallback;\n}\n","import { isUndefined } from 'lodash';\n\nconst getRemoteAddress = (remoteAddress: string): string =>\n  isUndefined(remoteAddress.split(':')[3])\n    ? 'localhost'\n    : remoteAddress.split(':')[3];\n\nexport default function loginOptions(\n  command: string,\n  remoteAddress: string\n): string[] {\n  return command === 'login'\n    ? [command, '-h', getRemoteAddress(remoteAddress)]\n    : [command];\n}\n","import { isUndefined } from 'lodash';\nimport parseCommand from './parse';\nimport logger from '../utils/logger';\n\nexport default function sshOptions(\n  { pass, path, command, host, port, auth, knownhosts }: { [s: string]: string },\n  key?: string\n): string[] {\n  const cmd = parseCommand(command, path);\n  const hostChecking = (knownhosts !== '/dev/null') ? 'yes' : 'no'\n  const sshRemoteOptsBase = [\n    'ssh',\n    host,\n    '-t',\n    '-p',\n    port,\n    '-o',\n    `PreferredAuthentications=${auth}`,\n    '-o',\n    `UserKnownHostsFile=${knownhosts}`,\n    '-o', \n    `StrictHostKeyChecking=${hostChecking}`,\n  ];\n  logger.info(`Authentication Type: ${auth}`);\n  if (!isUndefined(key)) {\n    return sshRemoteOptsBase.concat(['-i', key, cmd]);\n  }\n  if (pass !== '') {\n    return ['sshpass', '-p', pass].concat(sshRemoteOptsBase, [cmd]);\n  }\n  if (auth === 'none') {\n    sshRemoteOptsBase.splice(sshRemoteOptsBase.indexOf('-o'), 2);\n  }\n\n  if (cmd === '') {\n    return sshRemoteOptsBase;\n  }\n  return sshRemoteOptsBase.concat([cmd]);\n}\n","import { isUndefined } from 'lodash';\n\nexport default function parseCommand(command: string, path?: string): string {\n  if (command === 'login' && isUndefined(path)) return '';\n  return !isUndefined(path)\n    ? `$SHELL -c \"cd ${path};${command === 'login' ? '$SHELL' : command}\"`\n    : command;\n}\n","import * as url from 'url';\nimport { Socket } from 'socket.io';\nimport { SSH } from '../interfaces';\nimport address from './address';\nimport loginOptions from './login';\nimport sshOptions from './ssh';\n\nconst localhost = (host: string): boolean =>\n  process.getuid() === 0 &&\n  (host === 'localhost' || host === '0.0.0.0' || host === '127.0.0.1');\n\nconst urlArgs = (\n  referer: string,\n  def: { [s: string]: string | undefined }\n): { [s: string]: string } =>\n  Object.assign(def, url.parse(referer, true).query);\n\nexport default (\n  {\n    request: {\n      headers: { referer },\n    },\n    client: {\n      conn: { remoteAddress },\n    },\n  }: Socket,\n  { user, host, port, auth, pass, key, knownhosts }: SSH,\n  command: string,\n  forcessh: boolean\n): { args: string[]; user: boolean } => ({\n  args: !forcessh && localhost(host)\n    ? loginOptions(command, remoteAddress)\n    : sshOptions(\n        { ...urlArgs(referer, {\n            port: `${port}`,\n            pass: pass || '',\n            command,\n            auth,\n            knownhosts,\n          }),\n          host: address(referer, user, host)\n        },\n        key\n      ),\n  user:\n    (!forcessh && localhost(host)) ||\n    user !== '' ||\n    user.includes('@') ||\n    address(referer, user, host).includes('@'),\n});\n","import { IPtyForkOptions } from 'node-pty';\nimport { isUndefined } from 'lodash';\n\nexport const xterm: IPtyForkOptions = {\n  name: 'xterm-256color',\n  cols: 80,\n  rows: 30,\n  cwd: process.cwd(),\n  env: Object.assign(\n    {},\n    ...Object.keys(process.env)\n      .filter((key: string) => !isUndefined(process.env[key]))\n      .map((key: string) => ({ [key]: process.env[key] }))\n  ),\n};\n","import { isUndefined } from 'lodash';\nimport { spawn } from 'node-pty';\nimport { logger } from '../../utils';\nimport { xterm } from './xterm';\n\nexport default function spawnTerm(\n  socket: SocketIO.Socket,\n  args: string[]\n): void {\n  const term = spawn('/usr/bin/env', args, xterm);\n  const { pid } = term;\n  const address = args[0] === 'ssh' ? args[1] : 'localhost';\n  logger.info('Process Started on behalf of user', {\n    pid,\n    address,\n  });\n  socket.emit('login');\n  term.on('exit', code => {\n    logger.info('Process exited', { code, pid });\n    socket.emit('logout');\n    socket\n      .removeAllListeners('disconnect')\n      .removeAllListeners('resize')\n      .removeAllListeners('input');\n  });\n  term.on('data', data => {\n    socket.emit('data', data);\n  });\n  socket\n    .on('resize', ({ cols, rows }) => {\n      term.resize(cols, rows);\n    })\n    .on('input', input => {\n      if (!isUndefined(term)) term.write(input);\n    })\n    .on('disconnect', () => {\n      term.kill();\n      logger.info('Process exited', { code: 0, pid });\n    });\n}\n","/**\n * Create WeTTY server\n * @module WeTTy\n */\nimport server from '../socketServer';\nimport getCommand from '../command';\nimport { login, spawn } from './term';\nimport { loadSSL, logger } from '../utils';\nimport { SSH, SSL, SSLBuffer, Server } from '../interfaces';\n\n/**\n * Starts WeTTy Server\n * @name startWeTTy\n */\nexport default function startWeTTy(\n  ssh: SSH = { user: '', host: 'localhost', auth: 'password', port: 22 },\n  serverConf: Server = {\n    base: '/wetty/',\n    port: 3000,\n    host: '0.0.0.0',\n    title: 'WeTTy',\n    bypasshelmet: false,\n  },\n  command = '',\n  forcessh = false,\n  ssl?: SSL\n): Promise<SocketIO.Server> {\n  return loadSSL(ssl).then((sslBuffer: SSLBuffer) => {\n    if (ssh.key) {\n      logger.warn(`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n! Password-less auth enabled using private key from ${ssh.key}.\n! This is dangerous, anything that reaches the wetty server\n! will be able to run remote operations without authentication.\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`);\n    }\n\n    const io: SocketIO.Server = server(serverConf, sslBuffer);\n    /**\n     * Wetty server connected too\n     * @fires WeTTy#connnection\n     */\n    io.on('connection', (socket: SocketIO.Socket) => {\n      /**\n       * @event wetty#connection\n       * @name connection\n       */\n      logger.info('Connection accepted.');\n      const { args, user: sshUser } = getCommand(socket, ssh, command, forcessh);\n      logger.debug('Command Generated', {\n        user: sshUser,\n        cmd: args.join(' '),\n      });\n\n      if (sshUser) {\n        spawn(socket, args);\n      } else {\n        login(socket)\n          .then((username: string) => {\n            args[1] = `${username.trim()}@${args[1]}`;\n            logger.debug('Spawning term', {\n              username: username.trim(),\n              cmd: args.join(' ').trim(),\n            });\n            return spawn(socket, args);\n          })\n          .catch(() => {\n            logger.info('Disconnect signal sent');\n          });\n      }\n    });\n\n    return io;\n  });\n}\n","import { readFile } from 'fs-extra';\nimport { resolve } from 'path';\nimport { isUndefined } from 'lodash';\nimport { SSL, SSLBuffer } from '../interfaces';\n\nexport async function loadSSL(ssl?: SSL): Promise<SSLBuffer> {\n  if (isUndefined(ssl) || isUndefined(ssl.key) || isUndefined(ssl.cert))\n    return {};\n  const [key, cert]: Buffer[] = await Promise.all([\n    readFile(resolve(ssl.key)),\n    readFile(resolve(ssl.cert)),\n  ]);\n  return { key, cert };\n}\n","import { spawn } from 'node-pty';\nimport { xterm } from './xterm';\n\nexport function login(socket: SocketIO.Socket): Promise<string> {\n  // Check request-header for username\n  const remoteUser = socket.request.headers['remote-user'];\n  if (remoteUser) {\n    return new Promise(resolve => {\n      resolve(remoteUser);\n    });\n  }\n\n  // Request carries no username information\n  // Create terminal and ask user for username\n  const term = spawn('/usr/bin/env', ['node', `${__dirname}/buffer.js`], xterm);\n  let buf = '';\n  return new Promise((resolve, reject) => {\n    term.on('exit', () => {\n      resolve(buf);\n    });\n    term.on('data', data => {\n      socket.emit('data', data);\n    });\n    socket\n      .on('input', (input: string) => {\n        term.write(input);\n        buf = /\\177/.exec(input) ? buf.slice(0, -1) : buf + input;\n      })\n      .on('disconnect', () => {\n        term.kill();\n        reject();\n      });\n  });\n}\n","import WeTTy from './wetty';\nimport init from './cli';\n\nexport default { start: WeTTy, init };\n","import * as yargs from 'yargs';\nimport { logger } from '../utils';\nimport WeTTy from '../wetty';\nimport { CLI } from './options';\nimport { unWrapArgs } from './parseArgs';\n\nexport default function init(opts: CLI): void {\n  if (!opts.help) {\n    const { ssh, server, command, forcessh, ssl } = unWrapArgs(opts);\n    WeTTy(ssh, server, command, forcessh, ssl).catch(err => {\n      logger.error(err);\n      process.exitCode = 1;\n    });\n  } else {\n    yargs.showHelp();\n    process.exitCode = 0;\n  }\n}\n","import { isUndefined } from 'lodash';\nimport { SSH, SSL, Server } from '../interfaces';\nimport { Options } from './options';\n\nexport function unWrapArgs(\n  args: Options\n): { ssh: SSH; server: Server; command?: string; forcessh?: boolean; ssl?: SSL } {\n  return {\n    ssh: {\n      user: args.sshuser,\n      host: args.sshhost,\n      auth: args.sshauth,\n      port: args.sshport,\n      pass: args.sshpass,\n      key: args.sshkey,\n      knownhosts: args.knownhosts,\n    },\n    server: {\n      base: args.base,\n      host: args.host,\n      port: args.port,\n      title: args.title,\n      bypasshelmet: args.bypasshelmet || false,\n    },\n    command: args.command,\n    forcessh: args.forcessh,\n    ssl:\n      isUndefined(args.sslkey) || isUndefined(args.sslcert)\n        ? undefined\n        : { key: args.sslkey, cert: args.sslcert },\n  };\n}\n"],"sourceRoot":""}